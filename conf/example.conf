##############################
# Example Configuration File #
# 13 June 2012 by HCG        #
##############################

# All of the configuration options here that take 
# single parameters (i.e., all except remote_peers and 
# local_endpoints) can be passed as command line 
# options like this:
#  ./dissent --log=stderr --mode=console (...etc)

[general]

####################
# General

# The mode determines what the Dissent node's interface to the
# outside world will be. In other words, mode lets you pick the
# interface that you will use to send messages into the Dissent
# protocol round and read messages from the round.
#
#   null = No interface for sending/receiving messages
#   console = Text-based console interface using stdin/stdout
#   web_server = HTTP API (see "Web Server" section below)
#   entry_tunnel = SOCKS proxy entry node (see "Proxy" section below)
#   exit_tunnel = SOCKS proxy exit node (see "Proxy" section below)
# values: null|console|web_server|entry_tunnel|exit_tunnel
# default: <none>
mode = null

# Use many threads for faster encryption/decryption.
# values: true|false
# default: false
multithreading = true

# Which Dissent protocol to use.
#   null = Non-anonymized communication
#   shuffle = Dissent CCS'10 shuffle
#   bulk = Dissent CCS'10 shuffle+bulk 
#   repeatingbulk = Dissent v2 bulk (one shuffle + many bulks)
#   tolerantbulk = Dissent bulk protocol tolerant to client failure 
#   csbulk = Dissent client/server (OSDI'12)
#   
# values: null|shuffle|bulk|repeatingbulk|tolerantbulk|csbulk
# default: null
session_type = "repeatingbulk"

# Generate random keys on start up. Since there is no way
# to store or load user keys, this value should always be
# true.
# values: true
# default: false
demo_mode = true

# The number of local Dissent nodes to run in the same process.
# This is useful for emulating a full Dissent network on a single
# machine.
# default: 1
local_nodes = 1

# Where to send the logging information.
# values: stderr|stdout|<file_name>|<empty>
# default: no logging
log = "stderr"

# A base-64 encoded string representing this node's unique
# identifier. In a secure implementation, this might be the
# hash of the node's public key.
# 
# We make no effort to enforce uniqueness of the local_ids
# across the Dissent network so if many nodes share an ID,
# strange things will happen.
local_id="HJf+qfK7oZVR3dOqeUQcM8TGeVA="

# A base-64 encoded string representing the leader node's
# unique identifier. All nodes in the network should use the same
# leader ID and there should be one node whose local_id is
# also the leader_id. If there is no node with this ID, strange
# things will happen.
#
# We make no effort to enforce uniqueness of the leader_ids 
# across the Dissent network so if many nodes share an ID,
# strange things will happen.
leader_id="HJf+qfK7oZVR3dOqeUQcM8TGeVA="

####################
# Network

# A quoted, comma-separated list of remote addresses to 
# connect to when the the node starts up. 
# remote_peers = "tcp://192.168.4.1:33347,tcp://10.0.0.3:9214"
remote_peers = "tcp://127.0.0.1:33347"

# A quoted, comma-separated list of local addresses to
# listen on for incoming requests when the node starts up.
# If you want to listen only on one specific interface,
# enter that interface's IP address here.
endpoints = "tcp://:33347"


####################
# Group Policy

# This value determines how the set of servers is selected
# (in the protocols that use servers). 
#   CompleteGroup = All nodes are servers
#   FixedSubgroup = 10 nodes with the lowest local_ids are servers
#   ManagedSubgroup = Nodes with super_peer=true are servers
#   DisabledGroup = No nodes are servers
#
# values: CompleteGroup |
#         FixedSubgroup |
#         ManagedSubgroup |
#         DisabledGroup
# default: CompleteGroup
subgroup_policy = "ManagedSubgroup"

# True if this node should be a server (in the
# protocols where there are servers and where
# subgroup_policy=ManagedSubgroup).
# 
# values: true|false
# default: false
super_peer = true


####################
# Web Server

# IP:port on which to listen for incoming HTTP API
# requests. The details of the API are too complicated
# to put here, but using a GET on /web will probably 
# return something.
web_server_url = "http://0.0.0.0:8080"

####################
# Proxy 

# Dissent has a very primitive SOCKSv5 proxy for
# tunnelling TCP and UDP flows through a Dissent network.
# At lease one node must serve as the entry point
# into the Dissent network (mode=entry_tunnel) and only
# one node must serve as the exit point from Dissent
# onto the Internet (mode=exit_tunnel). If there are many
# exit nodes, unexpected things will happen.

# The address at which the SOCKS entry node should listen
# for incoming SOCKSv5 connections.
entry_tunnel_url = "tcp://127.0.0.1:8081"

# This is an OPTIONAL setting. If it is set to something,
# the tunnel exit node will tunnel outgoing traffic through
# the SOCKS proxy listed here. This is usefull for tunneling
# the output of a Dissent tunnel through Tor.
exit_tunnel_proxy_url = "tcp://10.0.0.5:9090"

